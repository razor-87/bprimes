//go:build ignore
// +build ignore

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"strconv"
)

const (
	m         = 64
	blockLen  = 16
	k         = m * blockLen
	blocksLen = 15123  // limit/k + 1
	template  = ":%#x" // or %#b
)

//go:generate go run gen.go

func main() {
	f, err := os.Open("1M-Primes.txt") // unpacked from https://precomputed.org/archives/1M-Primes.zip
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	buf := bytes.NewBuffer([]byte(`// Code generated by go generate gen.go; DO NOT EDIT.`))
	fmt.Fprintln(buf, "\n\npackage bprimes")
	fmt.Fprintf(buf, "\n%s%d%s\n", "type block [", blockLen, "]uint32")
	fmt.Fprintf(buf, "\n%s%d%s\n", "var blocks = [", blocksLen, "]block{")

	var (
		p, i, q, r int
		bitset     uint32
	)
	newLine := true
	sc := bufio.NewScanner(f)

	_ = sc.Scan() // skip 2
	for sc.Scan() {
		p, _ = strconv.Atoi(sc.Text())

		r = p % k
		if r/m != i {
			fmt.Fprintf(buf, strconv.Itoa(i)+template, bitset)

			if p/k == q {
				fmt.Fprint(buf, ",")
			} else {
				fmt.Fprintln(buf, "},")
				newLine = true
			}
			bitset = 0
		}

		q = p / k
		if newLine {
			fmt.Fprint(buf, "\t"+strconv.Itoa(q)+":{")
			newLine = false
		}

		bitset |= (1 << odd2Shift[uint8(p%m)])
		i = r / m
	}

	fmt.Fprintf(buf, strconv.Itoa(i)+template, bitset)
	fmt.Fprintln(buf, "},")
	fmt.Fprintln(buf, "}")

	if err := sc.Err(); err != nil {
		log.Fatal(err)
	}

	out, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	if err := os.WriteFile("blocks.go", out, 0666); err != nil {
		log.Fatal(err)
	}
}

var odd2Shift = map[uint8]uint8{
	1:  0,
	3:  1,
	5:  2,
	7:  3,
	9:  4,
	11: 5,
	13: 6,
	15: 7,
	17: 8,
	19: 9,
	21: 10,
	23: 11,
	25: 12,
	27: 13,
	29: 14,
	31: 15,
	33: 16,
	35: 17,
	37: 18,
	39: 19,
	41: 20,
	43: 21,
	45: 22,
	47: 23,
	49: 24,
	51: 25,
	53: 26,
	55: 27,
	57: 28,
	59: 29,
	61: 30,
	63: 31,
}

//go:build ignore
// +build ignore

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"strconv"
)

const (
	m         = 96
	blockLen  = 16
	k         = m * blockLen
	blocksLen = 10082  // limit/k + 1
	template  = ":%#x" // or %#b
)

//go:generate go run gen.go

func main() {
	f, err := os.Open("1M-Primes.txt") // unpacked from https://precomputed.org/archives/1M-Primes.zip
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	buf := bytes.NewBuffer([]byte(`// Code generated by go generate gen.go; DO NOT EDIT.`))
	fmt.Fprintln(buf, "\n\npackage bprimes")
	fmt.Fprintf(buf, "\n%s%d%s\n", "type block [", blockLen, "]uint32")
	fmt.Fprintf(buf, "\n%s%d%s\n", "var blocks = [", blocksLen, "]block{")

	var (
		p, q, r int
		blocks  [blocksLen][blockLen]uint32
	)
	sc := bufio.NewScanner(f)

	for i := 0; i < 5; i++ { // skip first five rows
		_ = sc.Scan()
	}
	p, _ = strconv.Atoi(sc.Text()) // first prime is 11

	for n := 9; n <= 15485863; n += 2 {
		if n%3 == 0 || n%5 == 0 || n%7 == 0 {
			continue
		}

		if n == p {
			q, r = n/k, n%k
			blocks[q][r/m] |= (1 << odd2Shift[uint8(r%m)])
			_ = sc.Scan()
			p, _ = strconv.Atoi(sc.Text())
		}
	}

	bound := blockLen - 1
	for i := range blocks {
		fmt.Fprint(buf, "\t"+strconv.Itoa(i)+":{")
		for j := range blocks[i] {
			if bitset := blocks[i][j]; bitset != 0 {
				fmt.Fprintf(buf, strconv.Itoa(j)+template, blocks[i][j])
				if j != bound {
					fmt.Fprint(buf, ",")
				}
			}
			if j == bound {
				fmt.Fprintln(buf, "},")
			}
		}
	}
	fmt.Fprintln(buf, "}")

	if err := sc.Err(); err != nil {
		log.Fatal(err)
	}

	out, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	if err := os.WriteFile("blocks.go", out, 0666); err != nil {
		log.Fatal(err)
	}
}

var odd2Shift = map[uint8]uint8{
	1:  0,
	5:  1,
	7:  2,
	11: 3,
	13: 4,
	17: 5,
	19: 6,
	23: 7,
	25: 8,
	29: 9,
	31: 10,
	35: 11,
	37: 12,
	41: 13,
	43: 14,
	47: 15,
	49: 16,
	53: 17,
	55: 18,
	59: 19,
	61: 20,
	65: 21,
	67: 22,
	71: 23,
	73: 24,
	77: 25,
	79: 26,
	83: 27,
	85: 28,
	89: 29,
	91: 30,
	95: 31,
}
